module webservices::mobl::simpleView
  import webservices :: mobl :: model
  import mobl :: ui :: generic
  import mobl :: ui :: generic :: datepicker
  screen showControl ( viewer : Control1 < Entity < ? > > , value : Entity < ? > ) {
    viewer ( value )
  }
  screen showControlList ( viewer : Control3 < String , Collection < Entity < ? > > , Control1 < Dynamic > > , headerName : String , values : Collection < Entity < ? > > , dviewer : Control1 < Dynamic > ) {
    viewer ( headerName , values , dviewer )
  }
  control showField ( name : String , value : String ) {
    item {
      label ( name , style = textFieldLabelStyle )
      textField ( value , disabled = true )
    }
  }
  control showTextField ( name : String , value : String ) {
    item {
      label ( name , style = textFieldLabelStyle )
      textField ( value )
    }
  }
  control showBoolField ( name : String , value : Bool ) {
    item {
      label ( name , style = textFieldLabelStyle )
      checkBox ( value )
    }
  }
  control showNumField ( name : String , value : Num ) {
    item {
      label ( name , style = textFieldLabelStyle )
      numField ( value )
    }
  }
  control showDateTimeField ( name : String , value : DateTime ) {
    item {
      label ( name , style = textFieldLabelStyle )
      dateTimePicker ( value )
    }
  }
  control showTimeField ( name : String , value : DateTime ) {
    item {
      label ( name , style = textFieldLabelStyle )
      timePicker ( value )
    }
  }
  control showDateField ( name : String , value : DateTime ) {
    item {
      label ( name , style = textFieldLabelStyle )
      datePicker ( value )
    }
  }
  control showEntityField ( name : String , value : Entity < ? > , viewer : Control1 < Entity < ? > > ) {
    when ( value ) {
      item ( onclick = { showControl(viewer,value); } ) {
        label ( name )
      }
    }
  }
  control showEntitiesField ( name : String , values : Collection < Entity < ? > > , viewer : Control1 < Entity < ? > > ) {
    when ( values ) {
      item ( onclick = { showControlList(showEntitiesList,name,values,viewer); } ) {
        label ( name )
      }
    }
  }
  control showEntitiesList ( headerName : String , values : Collection < Entity < ? > > , viewer : Control1 < Entity < ? > > ) {
    header ( headerName ) {
      backButton ( "back" , onclick = { back(); } )
    }
    list ( value in values ) {
      item ( onclick = { showControl(viewer,value); } ) {
        label ( value . id )
      }
    }
  }
  <javascript>
  __ns.back = function(callback) {
                history.back();
                callback();
              };
  </javascript>
  external function back ( ) : void
  screen showObjectEmptyScreen ( type : String , id : String , entityCTRL : Control2 < String , String > ) {
    entityCTRL ( type , id )
  }
  style customWarningItemStyle {
    itemMixin ( #000 , #ff5 ) ;
  }
  style customErrorItemStyle {
    itemMixin ( #000 , #f11 ) ;
  }
  control SimpleErrorViewControl ( errorTuple : Tuple2 < JSON , Control2 < String , String > > ) {
    when ( errorTuple . _1 . id ) {
      item {
        label ( errorTuple . _1 . ent + " : " + errorTuple . _1 . id )
      }
    }
    else {
    item {
      label ( errorTuple . _1 . message )
    }
    }
  }
  control DetailErrorViewControl ( errorTuple : Tuple2 < JSON , Control2 < String , String > > ) {
    when ( errorTuple . _1 . id ) {
      item {
        label ( errorTuple . _1 . ent + " : " + errorTuple . _1 . id )
      }
      when ( errorTuple . _2 != null ) {
        item ( onclick = { showObjectEmptyScreen(errorTuple._1.ent,errorTuple._1.id,errorTuple._2); } ) {
          label ( "Show Object" )
        }
      }
      list ( error in errorTuple . _1 . errors ) {
        when ( error . type == "warning" ) {
          item ( style = customWarningItemStyle ) {
            label ( error . message )
          }
        }
        when ( error . type == "error" ) {
          item ( style = customErrorItemStyle ) {
            label ( error . message )
          }
        }
      }
    }
    else {
    item {
      label ( errorTuple . _1 . message )
    }
    }
  }
  control showErrors ( errors : JSON , detailview : Control2 < String , String > = showObject , ignoreFunction : Function1 < JSON , void > ) {
    header ( "Errors" ) {
      backButton ( "back" , onclick = { back(); } )
      button ( "ignore" , onclick = { back(); ignoreFunction(errors); } )
    }
    var collection = Collection < Tuple2 < JSON , Control2 < String , String > > > ( )
    script {
      foreach ( error in errors ) {
        collection . add ( ( error , detailview ) );
      }
    }
    zoomList ( collection , SimpleErrorViewControl , DetailErrorViewControl )
  }
  screen showErrorsEmptyScreen ( errors : JSON , ctrl : Control2 < JSON , ? > , detailCTRL : Control2 < String , String > , continueFunction : Function1 < JSON , void > ) {
    ctrl ( errors , detailCTRL , continueFunction )
  }
  control showASimple ( ent : A ) {
    header ( "A" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showEntitiesField ( "list" , ent . list , showBSimple )
      showTextField ( "name" , ent . name )
      showNumField ( "lastSynced" , ent . lastSynced )
      showBoolField ( "sync" , ent . sync )
    }
  }
  control showBSimple ( ent : B ) {
    header ( "B" ) {
      backButton ( "back" , onclick = { back(); } )
    }
    group {
      showTextField ( "id" , ent . id )
      showNumField ( "version" , ent . version )
      showTextField ( "pr100" , ent . pr100 )
      showTextField ( "pr99" , ent . pr99 )
      showTextField ( "pr98" , ent . pr98 )
      showTextField ( "pr97" , ent . pr97 )
      showTextField ( "pr96" , ent . pr96 )
      showTextField ( "pr95" , ent . pr95 )
      showTextField ( "pr94" , ent . pr94 )
      showTextField ( "pr93" , ent . pr93 )
      showTextField ( "pr92" , ent . pr92 )
      showTextField ( "pr91" , ent . pr91 )
      showTextField ( "pr90" , ent . pr90 )
      showTextField ( "pr89" , ent . pr89 )
      showTextField ( "pr88" , ent . pr88 )
      showTextField ( "pr87" , ent . pr87 )
      showTextField ( "pr86" , ent . pr86 )
      showTextField ( "pr85" , ent . pr85 )
      showTextField ( "pr84" , ent . pr84 )
      showTextField ( "pr83" , ent . pr83 )
      showTextField ( "pr82" , ent . pr82 )
      showTextField ( "pr81" , ent . pr81 )
      showTextField ( "pr80" , ent . pr80 )
      showTextField ( "pr79" , ent . pr79 )
      showTextField ( "pr78" , ent . pr78 )
      showTextField ( "pr77" , ent . pr77 )
      showTextField ( "pr76" , ent . pr76 )
      showTextField ( "pr75" , ent . pr75 )
      showTextField ( "pr74" , ent . pr74 )
      showTextField ( "pr73" , ent . pr73 )
      showTextField ( "pr72" , ent . pr72 )
      showTextField ( "pr71" , ent . pr71 )
      showTextField ( "pr70" , ent . pr70 )
      showTextField ( "pr69" , ent . pr69 )
      showTextField ( "pr68" , ent . pr68 )
      showTextField ( "pr67" , ent . pr67 )
      showTextField ( "pr66" , ent . pr66 )
      showTextField ( "pr65" , ent . pr65 )
      showTextField ( "pr64" , ent . pr64 )
      showTextField ( "pr63" , ent . pr63 )
      showTextField ( "pr62" , ent . pr62 )
      showTextField ( "pr61" , ent . pr61 )
      showTextField ( "pr60" , ent . pr60 )
      showTextField ( "pr59" , ent . pr59 )
      showTextField ( "pr58" , ent . pr58 )
      showTextField ( "pr57" , ent . pr57 )
      showTextField ( "pr56" , ent . pr56 )
      showTextField ( "pr55" , ent . pr55 )
      showTextField ( "pr54" , ent . pr54 )
      showTextField ( "pr53" , ent . pr53 )
      showTextField ( "pr52" , ent . pr52 )
      showTextField ( "pr51" , ent . pr51 )
      showTextField ( "pr50" , ent . pr50 )
      showTextField ( "pr49" , ent . pr49 )
      showTextField ( "pr48" , ent . pr48 )
      showTextField ( "pr47" , ent . pr47 )
      showTextField ( "pr46" , ent . pr46 )
      showTextField ( "pr45" , ent . pr45 )
      showTextField ( "pr44" , ent . pr44 )
      showTextField ( "pr43" , ent . pr43 )
      showTextField ( "pr42" , ent . pr42 )
      showTextField ( "pr41" , ent . pr41 )
      showTextField ( "pr40" , ent . pr40 )
      showTextField ( "pr39" , ent . pr39 )
      showTextField ( "pr38" , ent . pr38 )
      showTextField ( "pr37" , ent . pr37 )
      showTextField ( "pr36" , ent . pr36 )
      showTextField ( "pr35" , ent . pr35 )
      showTextField ( "pr34" , ent . pr34 )
      showTextField ( "pr33" , ent . pr33 )
      showTextField ( "pr32" , ent . pr32 )
      showTextField ( "pr31" , ent . pr31 )
      showTextField ( "pr30" , ent . pr30 )
      showTextField ( "pr29" , ent . pr29 )
      showTextField ( "pr28" , ent . pr28 )
      showTextField ( "pr27" , ent . pr27 )
      showTextField ( "pr26" , ent . pr26 )
      showTextField ( "pr25" , ent . pr25 )
      showTextField ( "pr24" , ent . pr24 )
      showTextField ( "pr23" , ent . pr23 )
      showTextField ( "pr22" , ent . pr22 )
      showTextField ( "pr21" , ent . pr21 )
      showTextField ( "pr20" , ent . pr20 )
      showTextField ( "pr19" , ent . pr19 )
      showTextField ( "pr18" , ent . pr18 )
      showTextField ( "pr17" , ent . pr17 )
      showTextField ( "pr16" , ent . pr16 )
      showTextField ( "pr15" , ent . pr15 )
      showTextField ( "pr14" , ent . pr14 )
      showTextField ( "pr13" , ent . pr13 )
      showTextField ( "pr12" , ent . pr12 )
      showTextField ( "pr11" , ent . pr11 )
      showTextField ( "pr10" , ent . pr10 )
      showTextField ( "pr9" , ent . pr9 )
      showTextField ( "pr8" , ent . pr8 )
      showTextField ( "pr7" , ent . pr7 )
      showTextField ( "pr6" , ent . pr6 )
      showTextField ( "pr5" , ent . pr5 )
      showTextField ( "pr4" , ent . pr4 )
      showTextField ( "pr3" , ent . pr3 )
      showTextField ( "pr2" , ent . pr2 )
      showTextField ( "pr1" , ent . pr1 )
    }
  }
  screen syncSimpleView ( ) {
    header ( "Sync Entities" ) {
      backButton ( "back" )
    }
    tabSet ( [ ( "A" , "" , syncSimpleView_A ) ] )
  }
  control syncSimpleView_A ( ) {
    var phrase = ""
    searchBox ( phrase )
    list ( ent in A . searchPrefix ( phrase ) . order ( "name" , true ) ) {
      item {
        checkBox ( ent . sync , label = ent . name )
      }
    }
  }
  control showObject ( type : String , id : String ) {
    when ( type == "A" ) {
      showASimple ( A . load ( id ) )
    }
    when ( type == "B" ) {
      showBSimple ( B . load ( id ) )
    }
  }